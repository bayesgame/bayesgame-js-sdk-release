"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("ethers"),t=require("../node_modules/.pnpm/@0xsequence_multicall@0.41.3/node_modules/@0xsequence/multicall/dist/0xsequence-multicall.esm.js"),r=require("../node_modules/.pnpm/@ethersproject_bignumber@5.7.0/node_modules/@ethersproject/bignumber/lib.esm/bignumber.js");function n(e){return r.BigNumber.isBigNumber(e)||-1!==["string","number"].indexOf(typeof e)}function a(e){return void 0===e||Array.isArray(e)&&e.every((e=>n(e)||Array.isArray(e)&&e.every(n)))}async function l(e,r){const n=r.map((e=>({to:e.target,data:e.callData}))),a=e.getProvider();if(!a)throw new Error("no provider");const l=new t.providers.MulticallProvider(a);return await Promise.all(n.map((e=>l.call(e))))}function i(e,t,r){let n={valid:!1,error:!1,result:void 0};if(e&&e.length>2&&e){n.valid=!0;try{n.error=!0,n.result=t.decodeFunctionResult(r,e)}catch(e){}}return n}exports.decodeCall=i,exports.isMethodArg=n,exports.isValidMethodArgs=a,exports.multicall=l,exports.useMultipleContractSingleData=async function(e,t,r,n,o,s){var u;if(!t.length)throw new Error("useMultipleContractSingleData no addresses");let c=null!==(u=null==s?void 0:s.gasRequired)&&void 0!==u?u:0;void 0===c&&(c=0);const{fragment:d,callData:g}=function(e,t,r){const n=null==t?void 0:t.getFunction(e),l=n&&a(r)?null==t?void 0:t.encodeFunctionData(n,r):void 0;return{fragment:n,callData:l}}(n,r,o),m=[];return t.map((e=>{e&&m.push({target:e,callData:g,gasLimit:c})})),(await l(e,m)).map((e=>i(e,r,null!=d?d:"")))},exports.useSingleContractWithCallData=async function(t,r,n,a){var o;if(!n.length)throw new Error("useSingleContractWithCallData no call data");let s=null!==(o=null==a?void 0:a.gasRequired)&&void 0!==o?o:0;void 0===s&&(s=0);const u=n.map((e=>({target:r.address,callData:e,gasLimit:s}))),c=await l(t,u);if(c.length!=n.length)throw new Error("useSingleContractWithCallData call result length is not match");return c.map(((t,a)=>i(t,null==r?void 0:r.interface,e.BaseContract.getInterface(r.interface).getFunction(n[a].substring(0,10)))))};
