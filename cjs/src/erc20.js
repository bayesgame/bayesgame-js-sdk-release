"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var t=require("ethers"),n=require("./common/abi/ERC20.js"),r=require("./common/transaction.js"),e=require("./contract.js");class a extends e.BaseContract{constructor(r,e){super(r,e,n.ERC20ABI),this.maxAllowanced=t.BigNumber.from(10).pow(64).toString(),this.contract=this.contract}approve(t,n){return n||(n=this.maxAllowanced),r.getTransactionMethods(this.contract,"approve",[t,n])}transfer(t,n){return r.getTransactionMethods(this.contract,"transfer",[t,n])}transferFrom(t,n,e){return r.getTransactionMethods(this.contract,"transferFrom",[t,n,e])}async info(){let t=this.chain.getToken(this.address);return t||(t=await this._info()),t}async name(){return(await this.info()).name}async symbol(){return(await this.info()).symbol}async decimals(){return(await this.info()).decimals}async balanceOf(t){if(this.chain.isZeroAddress(this.address)){return(await this.provider.getBalance(t)).toString()}return(await this.contract.balanceOf(t)).toString()}async allowance(n,r){if(this.chain.isZeroAddress(this.address))return t.BigNumber.from("0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff").toString();return(await this.contract.allowance(n,r)).toString()}async _info(){const t={standard:"erc20",address:this.address,name:this.chain.zeroSymbol(),symbol:this.chain.zeroSymbol(),decimals:18};if(!this.chain.isZeroAddress(this.address)){const[n,r,e]=await Promise.all([this.contract.name(),this.contract.symbol(),this.contract.decimals()]);t.name=n,t.symbol=r,t.decimals=e}return this.chain.setToken(this.address,t),t}async getTransferEvent(t,n="latest"){const r=this.contract.filters.Transfer();return await this.contract.queryFilter(r,t,n)}approveEncodeFunction(t,n){return this.approve(t,n).encodeFunction()}transferEncodeFunction(t,n){return this.transfer(t,n).encodeFunction()}transferFromEncodeFunction(t,n,r){return this.transferFrom(t,n,r).encodeFunction()}balanceOfEncodeFunction(t){return this.contract.interface.encodeFunctionData("balanceOf",[t])}allowanceEncodeFunction(t,n){return this.contract.interface.encodeFunctionData("allowance",[t,n])}}exports.ERC20=a,exports.getERC20=function(t,n){return t.contractmaps[n.toLowerCase()]||new a(t,n),t.contractmaps[n.toLowerCase()]};
