"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var t=require("./common/abi/ERC1155.js"),r=require("./common/transaction.js"),n=require("./contract.js");class e extends n.BaseContract{constructor(r,n,e=t.ERC1155ABI){super(r,n,e),this.contract=this.contract}safeTransferFrom(t,n,e,a,s){return s||(s="0x"),r.getTransactionMethods(this.contract,"safeTransferFrom",[t,n,e,a,s])}safeBatchTransferFrom(t,n,e,a,s){return s||(s="0x"),r.getTransactionMethods(this.contract,"safeBatchTransferFrom",[t,n,e,a,s])}setApprovalForAll(t,n){return r.getTransactionMethods(this.contract,"setApprovalForAll",[t,n])}async name(){return(await this.info()).name}async symbol(){return(await this.info()).symbol}async info(){let t=this.chain.getToken(this.address);return t||(t=await this._info()),t}async balanceOf(t,r){return(await this.contract.balanceOf(t,r)).toString()}async balanceOfBatch(t,r){return(await this.contract.balanceOfBatch(t,r)).map((t=>t.toString()))}async tokenURI(t){return this.uri(t)}async uri(t){try{return await this.contract.uri(t)}catch(t){return console.warn("uri except",t),""}}async ownerOf(t){return""}async _info(){if(this.chain.isZeroAddress(this.address))throw new Error("invlaid erc1155 address");let t={standard:"erc1155",address:this.address,name:"",symbol:"",decimals:0};return this.chain.setToken(this.address,t),t}setApprovalForAllEncodeFunction(t,r){return this.setApprovalForAll(t,r).encodeFunction()}safeTransferFromEncodeFunction(t,r,n,e,a){a||(a="0x");return this.safeTransferFrom(t,r,n,e,a).encodeFunction()}safeBatchTransferFromEncodeFunction(t,r,n,e,a){a||(a="0x");return this.safeBatchTransferFrom(t,r,n,e,a).encodeFunction()}ownerOfEncodeFunction(t){return""}balanceOfEncodeFunction(t,r){return this.contract.interface.encodeFunctionData("balanceOf",[t,r])}balanceOfBatchEncodeFunction(t,r){return this.contract.interface.encodeFunctionData("balanceOfBatch",[t,r])}isApprovedForAllEncodeFunction(t,r){return this.contract.interface.encodeFunctionData("isApprovedForAll",[t,r])}async getTransferSingleEvent(t,r="latest"){const n=this.contract.filters.TransferSingle();return await this.contract.queryFilter(n,t,r)}async getTransferBatchEvent(t,r="latest"){const n=this.contract.filters.TransferBatch();return await this.contract.queryFilter(n,t,r)}async isApprovedForAll(t,r){return await this.contract.isApprovedForAll(t,r)}}exports.ERC1155=e,exports.getERC1155=function(t,r){return t.contractmaps[r.toLowerCase()]||new e(t,r),t.contractmaps[r.toLowerCase()]};
