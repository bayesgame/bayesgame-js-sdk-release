"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),require("net"),require("tls");var e=require("crypto"),t=require("./permessage-deflate.js"),s=require("./constants.js"),r=require("./validation.js"),i=require("./buffer-util.js");function n(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var o,a,h=n(e);exports.__require=function(){if(a)return o;a=1;const{randomFillSync:e}=h.default,n=t.__require(),{EMPTY_BUFFER:f}=s.__require(),{isValidStatusCode:l}=r.__require(),{mask:d,toBuffer:u}=i.__require(),c=Buffer.alloc(4);class _{constructor(e,t){this._extensions=t||{},this._socket=e,this._firstFragment=!0,this._compress=!1,this._bufferedBytes=0,this._deflating=!1,this._queue=[]}static frame(t,s){const r=s.mask&&s.readOnly;let i=s.mask?6:2,n=t.length;t.length>=65536?(i+=8,n=127):t.length>125&&(i+=2,n=126);const o=Buffer.allocUnsafe(r?t.length+i:i);return o[0]=s.fin?128|s.opcode:s.opcode,s.rsv1&&(o[0]|=64),o[1]=n,126===n?o.writeUInt16BE(t.length,2):127===n&&(o.writeUInt32BE(0,2),o.writeUInt32BE(t.length,6)),s.mask?(e(c,0,4),o[1]|=128,o[i-4]=c[0],o[i-3]=c[1],o[i-2]=c[2],o[i-1]=c[3],r?(d(t,c,o,i,t.length),[o]):(d(t,c,t,0,t.length),[o,t])):[o,t]}close(e,t,s,r){let i;if(void 0===e)i=f;else{if("number"!=typeof e||!l(e))throw new TypeError("First argument must be a valid error code number");if(void 0===t||""===t)i=Buffer.allocUnsafe(2),i.writeUInt16BE(e,0);else{const s=Buffer.byteLength(t);if(s>123)throw new RangeError("The message must not be greater than 123 bytes");i=Buffer.allocUnsafe(2+s),i.writeUInt16BE(e,0),i.write(t,2)}}this._deflating?this.enqueue([this.doClose,i,s,r]):this.doClose(i,s,r)}doClose(e,t,s){this.sendFrame(_.frame(e,{fin:!0,rsv1:!1,opcode:8,mask:t,readOnly:!1}),s)}ping(e,t,s){const r=u(e);if(r.length>125)throw new RangeError("The data size must not be greater than 125 bytes");this._deflating?this.enqueue([this.doPing,r,t,u.readOnly,s]):this.doPing(r,t,u.readOnly,s)}doPing(e,t,s,r){this.sendFrame(_.frame(e,{fin:!0,rsv1:!1,opcode:9,mask:t,readOnly:s}),r)}pong(e,t,s){const r=u(e);if(r.length>125)throw new RangeError("The data size must not be greater than 125 bytes");this._deflating?this.enqueue([this.doPong,r,t,u.readOnly,s]):this.doPong(r,t,u.readOnly,s)}doPong(e,t,s,r){this.sendFrame(_.frame(e,{fin:!0,rsv1:!1,opcode:10,mask:t,readOnly:s}),r)}send(e,t,s){const r=u(e),i=this._extensions[n.extensionName];let o=t.binary?2:1,a=t.compress;if(this._firstFragment?(this._firstFragment=!1,a&&i&&(a=r.length>=i._threshold),this._compress=a):(a=!1,o=0),t.fin&&(this._firstFragment=!0),i){const e={fin:t.fin,rsv1:a,opcode:o,mask:t.mask,readOnly:u.readOnly};this._deflating?this.enqueue([this.dispatch,r,this._compress,e,s]):this.dispatch(r,this._compress,e,s)}else this.sendFrame(_.frame(r,{fin:t.fin,rsv1:!1,opcode:o,mask:t.mask,readOnly:u.readOnly}),s)}dispatch(e,t,s,r){if(!t)return void this.sendFrame(_.frame(e,s),r);const i=this._extensions[n.extensionName];this._bufferedBytes+=e.length,this._deflating=!0,i.compress(e,s.fin,((t,i)=>{if(this._socket.destroyed){const e=new Error("The socket was closed while data was being compressed");"function"==typeof r&&r(e);for(let t=0;t<this._queue.length;t++){const s=this._queue[t][4];"function"==typeof s&&s(e)}}else this._bufferedBytes-=e.length,this._deflating=!1,s.readOnly=!1,this.sendFrame(_.frame(i,s),r),this.dequeue()}))}dequeue(){for(;!this._deflating&&this._queue.length;){const e=this._queue.shift();this._bufferedBytes-=e[1].length,Reflect.apply(e[0],this,e.slice(1))}}enqueue(e){this._bufferedBytes+=e[1].length,this._queue.push(e)}sendFrame(e,t){2===e.length?(this._socket.cork(),this._socket.write(e[0]),this._socket.write(e[1],t),this._socket.uncork()):this._socket.write(e[0],t)}}return o=_};
